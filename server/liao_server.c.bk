/*
*
*	command:
*		<命令> <内容>
*
*		命令:
*			HELO: 用于表示客户端自己的信息		helo uid:0000010 ios_token:xxxxxxxxxxxx
*
*
*
*/

#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <string.h>
#include <sys/epoll.h>
#include <unistd.h>
#include <fcntl.h>
#include <errno.h>
#include <sys/socket.h>  
#include <sys/epoll.h>  
#include <sys/sendfile.h>  
#include <sys/wait.h>  
#include <sys/stat.h>  
#include <netinet/in.h>  
#include <netinet/tcp.h>  
#include <arpa/inet.h>  
#include <strings.h>  

#include "confparser.h"
#include "dictionary.h"

#include "liao_log.h"
#include "liao_utils.h"
#include "liao_server.h"

#define MAX_LINE		1024
#define BUF_SIZE		1024

#define CFG_FILE		"./liao_config.ini"

dictionary *dict_conf = NULL;


struct clients *client_st;
dictionary *online_d;


// global config
int bind_port = 5050;
char mc_server[MAX_LINE] = "127.0.0.1";
int mc_port = 11211;
char mc_timeout[512] = "5000";
char max_works[512] = "512";


// epoll
int epoll_fd = -1; 
int epoll_nfds = -1; 
int epoll_event_num = 0;
struct epoll_event *epoll_evts = NULL;
int epoll_num_running = 0;
int listenfd = -1;

// buffer
char *pbuffer = NULL;
size_t buffer_size = 0;
size_t buffer_len = 0;

// ----------------
dictionary *liao_init_cond(char *conf_file);


// 配置文件操作
dictionary *liao_init_cond(char *conf_file)
{
   dictionary *dict = open_conf_file(conf_file);
   if (dict == NULL) {
       //log_error("errror");
       return NULL;
   }
    
   return dict;
}


void send_to_client(int sockfd, char *rspsoneBuf)
{
	int nwrite = 0;
    int buf_len = strlen(rspsoneBuf);
    int n = buf_len;
    while (n > 0) {
        nwrite = write(sockfd, rspsoneBuf + buf_len - n, n);   
        if (nwrite < n) {
            if (nwrite == -1 && errno != EAGAIN) {
                log_error("write to fd[%d] failed:[%d]%s", sockfd, errno, strerror(errno));
            }   
            break;
        }   

        n -= nwrite;
    }   

	log_debug("send fd[%d]:%s", sockfd, rspsoneBuf);

}


// 逻辑处理
void command(int sockfd, char *buf, size_t buf_size)
{
	int i = 0;

	// System Command
	if ( strcasecmp(buf, "sys_status") == 0 ) {
		status_cmd(sockfd, buf, strlen(buf));

		return;
	}


	char rspsoneBuf[512] = {0};
	
	// HELO: 用于表示客户端信息	helo uid:0000001 ios_token:xxxxxxxxxxxxxx fid:0000220
	if ( strncasecmp(buf, "helo ", 5) == 0 ) {
		char *pbuf = buf + 5;
		
		int ret = helo_cmd(sockfd, pbuf, buf_size - 5);
		if (ret == 0) {
			snprintf(rspsoneBuf, sizeof(rspsoneBuf), "%s OK\r\n", TAG_HELO);
			send_to_client(sockfd, rspsoneBuf);

		} else {
			snprintf(rspsoneBuf, sizeof(rspsoneBuf), "%s FAIL\r\n", TAG_HELO);
			send_to_client(sockfd, rspsoneBuf);

		}
	
		return;
	}

	// SENDTXT: 用于表示发送信息给对方 
	// sendtxt mid:1422868886214 uid:0000001 ios_token:xxxxxxxxxxxxxx fid:0000220 fios_token:ccccccccccccccc body:abcabcabc
	if ( strncasecmp(buf, "sendtxt ", 8) == 0 ) {
		char *pbuf = buf + 8;	
		
		char mid[MAX_LINE] = {0};
		int mid_size = MAX_LINE;
		int ret = sendtxt_cmd(sockfd, pbuf, buf_size - 8, mid, mid_size);
		if (ret == 0) {

			snprintf(rspsoneBuf, sizeof(rspsoneBuf), "%s OK %s\r\n", TAG_SENDTXT, mid);

			send_to_client(sockfd, rspsoneBuf);
		} else {
			snprintf(rspsoneBuf, sizeof(rspsoneBuf), "%s FAIL %s\r\n", TAG_SENDTXT, mid);
			send_to_client(sockfd, rspsoneBuf);
		}
		
		return;
	}

	// SENDIMG: 用于表示发送图片给对方
	// sendimg mid:1422868886214 uid:0000001 ios_token:xxxxxxxxxxxxxx fid:0000220 fios_token:ccccccccccccccc message:20:abcdabcdabcd...
	if ( strncasecmp(buf, "sendimg ", 8) == 0 ) {
		char *pbuf = buf + 8;
		
		char mid[MAX_LINE] = {0};
		int mid_size = MAX_LINE;
		int ret = sendimg_cmd(sockfd, pbuf, buf_size - 8, mid, mid_size);
		if (ret == 0) {
		
			snprintf(rspsoneBuf, sizeof(rspsoneBuf), "%s OK %s\r\n", TAG_SENDIMG, mid);
			send_to_client(sockfd, rspsoneBuf);

		} else {
			snprintf(rspsoneBuf, sizeof(rspsoneBuf), "%s FAIL %s\r\n", TAG_SENDIMG, mid);
			send_to_client(sockfd, rspsoneBuf);

		}

		return;
	}
	
	// QUIT: 用于表示客户端退出
	// quit uid:0000001
	if ( strncasecmp(buf, "quit ", 5) == 0 ) {
		char *pbuf = buf + 5;
		
		int ret = quit_cmd(sockfd, pbuf, buf_size - 5);
		if (ret == 0) {
			snprintf(rspsoneBuf, sizeof(rspsoneBuf), "%s OK\r\n", TAG_QUIT);
			send_to_client(sockfd, rspsoneBuf);

		} else {
			snprintf(rspsoneBuf, sizeof(rspsoneBuf), "%s FAIL\r\n", TAG_QUIT);
			send_to_client(sockfd, rspsoneBuf);
			
		}

		
		// 从epoll中删除，关闭fd
		struct epoll_event ev;
		ev.data.fd = sockfd;
		if (epoll_ctl(epoll_fd, EPOLL_CTL_DEL, sockfd, 0) == -1) {
			log_error("epoll_ctl fd[%d] EPOLL_CTL_DEL failed:[%d]%s", sockfd, errno, strerror(errno));
		}

		close(sockfd);
		epoll_num_running--;
		log_debug("sockfd[%d] close", sockfd);
		
		return ;
	}
}


// 处理配置文件
// return:
// 	0:succ	1:fail
int conf_init(char *cfg_file)
{
	// 检查配置文件是否正确
	if (*cfg_file == '\0') {
		fprintf(stderr, "config file is null\n");
		log_error("config file is null");
		return 1;
	}
	
	struct stat cfg_st;
	if (stat(cfg_file, &cfg_st) == -1) {
		fprintf(stderr, "file '%s' error:%s\n", cfg_file, strerror(errno));
		log_error("file '%s' error:%s", cfg_file, strerror(errno));
		return 1;
	}
	
	// 读取配置文件 
	dict_conf = liao_init_cond(cfg_file);
	if (dict_conf == NULL) {
        fprintf(stderr, "liao_init_cond fail\n");
        log_error("liao_init_cond fail");
        return 1;
    }   

	char *pbind_port = dictionary_get(dict_conf, "global:bind_port", NULL);
	if (pbind_port != NULL) {
		bind_port = atoi(pbind_port);
	}

    
    char *p_log_level = dictionary_get(dict_conf, "global:log_level", NULL);
    if (p_log_level != NULL) {
        if (strcasecmp(p_log_level, "debug") == 0) {
            log_level = debug;
        } else if (strcasecmp(p_log_level, "info") == 0) {
            log_level = info;
        }   
    } 
    
	char *pmc_server = dictionary_get(dict_conf, "global:mc_server", NULL);
	if (pmc_server == NULL) {
		fprintf(stderr, "memcached server configuration failed\n");
		log_error("memcached server configuration failed");
		return 1;
	}
	snprintf(mc_server, sizeof(mc_server), "%s", pmc_server);

	char *pmc_timeout = dictionary_get(dict_conf, "global:mc_timeout", NULL);
	if (pmc_timeout == NULL) {
		log_warning("parse config mc_timeout error, use defaut:%s", mc_timeout);
	}

	char *pmc_port = (char *)memchr(mc_server, ':', strlen(mc_server));
	if (pmc_port != NULL) {
		*pmc_port = '\0';
		mc_port = atoi(pmc_port + 1);
	}

	char *pmax_works = dictionary_get(dict_conf, "global:max_works", NULL);
	if (pmax_works == NULL) {
		log_warning("parse config max_works error, use default:%s", max_works);
	} else {
		snprintf(max_works, sizeof(max_works), "%s", pmax_works);
	}
	

	return 0;
}

// 设置fd为非阻塞模式
int setnonblocking(int fd)
{
	int opts;
	opts = fcntl(fd, F_GETFL);
	if (opts < 0) {
		log_error("fcntl F_GETFL failed:[%d]:%s", errno, strerror(errno));
		return 1;
	}

	opts = (opts | O_NONBLOCK);
	if (fcntl(fd, F_SETFL, opts) < 0) {
		log_error("fcntl F_SETFL failed:[%d]:%s", errno, strerror(errno));
		return 1;
	}

	return 0;
}


// 0:succ	1:fail
int resizebuf(char *pbuf, int new_size)
{
    char *new_pbuf = (char *)realloc(pbuf, new_size);
    if (new_pbuf == NULL) {
        log_error("realloc failed:%s", strerror(errno));
            
		return 1;
    } else {
        pbuf = new_pbuf; 

		return 0;
    }  
}


// 0:succ	1:fail
int client_close(int sockfd)
{
	log_debug("fd[%d] closed", sockfd);

	// client close
	int i = get_idx_with_sockfd(sockfd);
	if (i == -1) {
		log_error("get index failed: i[%d] = get_idx_with_sockfd(%d)", i, sockfd);
		return 1;
	}

	// 注册为离线   (uid => ios_token)
	dictionary_unset(online_d, client_st[i].uid);

	// 回收与初始化当前item
	init_clientst_item_with_idx(i);

	// 关闭客户端fd
	close(sockfd);

	return 0;
}




void usage(char *prog)
{
	printf("Usage:\n");
	printf("%s -c[config file]\n", prog);
}


void exit_self(int s) 
{
	log_debug("get sigint for exit self");

	if (epoll_fd != -1) {
		close(epoll_fd);
		epoll_fd = -1;
	}
	if (listenfd != -1) {
		close(listenfd);
		listenfd = -1;
	}
}


int main(int argc, char **argv)
{
	liao_log("liao_log", LOG_PID|LOG_NDELAY, LOG_MAIL);

	if (argc != 3) {
		usage(argv[0]);
		exit(0);
	}

	snprintf(icid_id, sizeof(icid_id), "00000000");
	snprintf(uniq_id, sizeof(uniq_id), "00000000");
	
	char cfg_file[MAX_LINE] = CFG_FILE;
	
	int c;
	const char *args = "c:h";
	while ((c = getopt(argc, argv, args)) != -1) {
		switch (c) {
			case 'c':
				snprintf(cfg_file, sizeof(cfg_file), "%s", optarg);
				break;
				
			case 'h':
			default:
				usage(argv[0]);
				exit(0);
		}
	}

	// 处理配置文件 
	if (conf_init(cfg_file)) {
		fprintf(stderr, "Unable to read control files:%s\n", cfg_file);
		log_error("Unable to read control files:%s", cfg_file);
		exit(1);
	}

	online_d = dictionary_new(atoi(max_works) + 1);
	

	// 测试mc是否正常
	int mc_ret = set_to_mc(mc_server, mc_port, "test", "1");
	if (mc_ret != 0) {
		fprintf(stderr, "memcached is error\n");
		log_error("memcached is error");
		//exit(1);
	}	

	client_st = (struct clients *)malloc((atoi(max_works) + 1) * sizeof(struct clients));
	if (!client_st) {
		log_error("malloc clients [%d] failed:[%d]%s", (atoi(max_works) + 1), errno, strerror(errno));
		exit(1);
	}
	
	int i = 0;
	for (i=0; i<(atoi(max_works) + 1); i++) {
		client_st[i].used = 0;
		client_st[i].fd = 0;
		memset(client_st[i].uid, MAX_LINE, 0);
		memset(client_st[i].ios_token, MAX_LINE, 0);
		client_st[i].data_size = 0;
		client_st[i].data_len = 0;
		client_st[i].pdata = NULL;
	}

	sig_catch(SIGINT, exit_self);

	// 开始服务
	int connfd, epfd, sockfd, n, nread;
	struct sockaddr_in local, remote;
	socklen_t addrlen;

	char buf[BUF_SIZE];

	// 创建listen socket
	if ((listenfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
		log_error("socket failed:[%d]:%s", errno, strerror(errno));
		exit(1);
	}
	if (setnonblocking(listenfd) > 0) {
		exit(1);
	}

	bzero(&local, sizeof(local));
	local.sin_family = AF_INET;
	local.sin_addr.s_addr = htonl(INADDR_ANY);
	local.sin_port = htons(bind_port);
	if (bind(listenfd, (struct sockaddr *)&local, sizeof(local)) < 0) {
		log_error("bind local %d failed:[%d]%s", bind_port, errno, strerror(errno));
		exit(1);
	}
	log_info("bind local %d succ", bind_port);

	if (listen(listenfd, atoi(max_works)) != 0) {
		log_error("listen fd[%d] max_number[%d] failed:[%d]%s", listenfd, max_works, errno, strerror(errno));
		exit(1);
	}

	// epoll create fd
	epoll_event_num = atoi(max_works) + 1;
	epoll_evts = NULL;
	epoll_fd = -1;
	epoll_nfds = -1;

	int epoll_i = 0;

	epoll_evts = (struct epoll_event *)malloc(epoll_event_num * sizeof(struct epoll_event));
	if (epoll_evts == NULL) {
		log_error("alloc epoll event failed");
    	_exit(111);
    }

	epoll_fd = epoll_create(epoll_event_num);
	if (epoll_fd == -1) {
		log_error("epoll_create max_number[%d] failed:[%d]%s", epoll_event_num, errno, strerror(errno));
		exit(1);
	}

	struct epoll_event ev;
	ev.events = EPOLLIN;
	ev.data.fd = listenfd;
	if (epoll_ctl(epoll_fd, EPOLL_CTL_ADD, ev.data.fd, &ev) == -1) {
		log_error("epoll_ctl: listen_socket failed:[%d]%s", errno, strerror(errno));
		exit(1);
	}
	epoll_num_running = 1;

	for (;;) {

		epoll_nfds = epoll_wait(epoll_fd, epoll_evts, epoll_event_num, -1);
		
		if (epoll_nfds == -1) {
			if (errno == EINTR)	{
				// 收到中断信号
				log_info("epoll_wait recive EINTR signal, continue");
				continue;
			}

			_exit(111);
		}

		log_debug("epoll_num_running:%d nfds:%d", epoll_num_running, epoll_nfds);
		for (epoll_i = 0; epoll_i < epoll_nfds; epoll_i++) {

			sockfd = epoll_evts[epoll_i].data.fd;
			if (sockfd == listenfd) {
				while ((connfd = accept(listenfd, (struct sockaddr *) &remote, &addrlen)) > 0) {
					char *ipaddr = inet_ntoa(remote.sin_addr);
					log_info("accept client:%s", ipaddr);
					if (setnonblocking(connfd) != 0) {
						log_error("setnonblocking fd[%d] failed", connfd);
					}
					ev.events = EPOLLIN | EPOLLET;	
					ev.data.fd = connfd;
					if (epoll_ctl(epoll_fd, EPOLL_CTL_ADD, connfd, &ev) == -1) {
						log_error("epoll_ctl client fd[%d] EPOLL_CTL_ADD failed:[%d]%s", connfd, errno, strerror(errno));
					}


					// send greeting
					char greetting[512] = {0};
					char hostname[1024] = {0};
					gethostname(hostname, sizeof(hostname));
					snprintf(greetting, sizeof(greetting), "%s OK %s\r\n", TAG_GREET, hostname);
					write(connfd, greetting, strlen(greetting));
					log_debug("send fd[%d]:%s", connfd, greetting);
				}

				if (connfd == -1) {
					if (errno != EAGAIN && errno != ECONNABORTED && errno != EPROTO && errno != EINTR) {
						log_error("accept failed:[%d]%s", errno, strerror(errno));
					}

					continue;
				}
			}

			if (epoll_evts[epoll_i].events & EPOLLIN) {

				// 读取数据总长度 
				char sizebuf[128] = {0};
				n = 0;
				for (;;) {
					nread = read(sockfd, sizebuf + n, 1);
					if (nread > 0) {

						if ( (sizebuf[n] == ' ') || (n == 127) ) {
							sizebuf[n] = '\0';
							break;
						}   

						n += nread;

					} else if ( nread == -1 && errno == EAGAIN ) {
						break;

					} else if ( (nread == 0) && ((errno != EAGAIN) || (errno != EINTR)) ) {
						break;
					}

					continue;
				}   

				if (nread == -1 && errno != EAGAIN) {
					log_error("read fd[%d] failed:[%d]%s", sockfd, errno, strerror(errno));

					continue;
				}

				if (nread == 0) {
					// client close socket
					client_close(sockfd);

					continue;
				} 
				log_debug("recv from fd[%d] message size:[%d]%s", sockfd, n, sizebuf);


				buffer_size = atoi(sizebuf);
				pbuffer = (char *)calloc(1, buffer_size + 1);
				if (pbuffer == NULL) {
					char rspsoneBuf[MAX_LINE] = {0};
					snprintf(rspsoneBuf, sizeof(rspsoneBuf), "%ld SYS fail\r\n", TAG_SENDTXT);
					send_to_client(sockfd, rspsoneBuf);

					continue;
				}
				buffer_len = 0;

				for (;;) {
					nread = read(sockfd, pbuffer + buffer_len, (buffer_size - buffer_len));
					if (nread > 0) {
						buffer_len += nread;

					} else if ( (nread == 0) && ((errno != EAGAIN) || (errno != EINTR)) ) {
						break;
					}

					continue;
				}

				if (nread == -1 && errno != EAGAIN) {
					log_error("read fd[%d] failed:[%d]%s", sockfd, errno, strerror(errno));
					continue;
				}

				if (nread == 0) {
					client_close(sockfd);
					continue;
				}

				log_debug("recv from fd[%d] message body:[%d]%s", sockfd, buffer_len, pbuffer);
/*
				// 获取发件人的index
				int ci = get_idx_with_sockfd(sockfd);
				if (ci < 0) {
					log_error("logic error, get_idx_with_sockfd(%d) fail", sockfd);
					continue;
				}

				// 读取第一个字符,用来判断是否是数据开始
				char is_start[1] = {0};
				nread = read(sockfd, is_start, 1);
				if (nread == -1 && errno != EAGAIN) {
					log_error("read fd[%d] failed:[%d]%s", sockfd, errno, strerror(errno));
					continue;
				}
				if (nread == 0) {
					// client close socket
					client_close(sockfd);
					continue;
				}

				if (is_start[0] == ' ') {
					// 数据开始
					if (client_st[ci].pdata != NULL) {
						log_error("logic error: send data order error, init client idx[%d]", ci);
						client_st[ci].data_size = 0;
						client_st[ci].data_len = 0;
						free(client_st[ci].pdata);
						client_st[ci].pdata = NULL;

						continue;

					}

				
					// 读取数据总长度 
					char sizebuf[128] = {0};
					n = 0;
					while ((nread = read(sockfd, sizebuf + n, 1)) > 0) {

						if (sizebuf[n] == ' ') {
							sizebuf[n] = '\0';
							break;
						}   

						n += nread;
					}   

					if (nread == -1 && errno != EAGAIN) {
						log_error("read fd[%d] failed:[%d]%s", sockfd, errno, strerror(errno));

						continue;
					}

					if (nread == 0) {
						// client close socket
						client_close(sockfd);

						continue;
					} 
					log_debug("recv from fd[%d] message size:[%d]%s", sockfd, n, sizebuf);


					client_st[ci].data_size = atoi(sizebuf);
					client_st[ci].pdata = (char *)calloc(1, client_st[ci].data_size + 1);
					if (client_st[ci].pdata == NULL) {
						char rspsoneBuf[MAX_LINE] = {0};
						snprintf(rspsoneBuf, sizeof(rspsoneBuf), "%ld SYS fail\r\n", TAG_SENDTXT);
						send_to_client(sockfd, rspsoneBuf);

						continue;
					}


				}  else {
					// 数据继续传的,非开始
					if (client_st[ci].pdata == NULL) {
						log_error("logic error: send data order error, client idx[%d], drop data", ci);

                        continue;
					} else {
						*(client_st[ci].pdata + client_st[ci].data_len) = is_start[0];
						client_st[ci].data_len++;
					}

				}

				while ((nread = read(sockfd, client_st[ci].pdata + client_st[ci].data_len, (4*1024))) > 0) {
					client_st[ci].data_len += nread;
				}

				if (nread == -1 && errno != EAGAIN) {
					log_error("read fd[%d] failed:[%d]%s", sockfd, errno, strerror(errno));

					continue;
				}
				
				if (nread == 0) {
					// client close socket
					client_close(sockfd);
					continue;
				}
				log_debug("recv from fd[%d] client[%d] message body:[%d]", sockfd, ci, client_st[ci].data_len);

				
				// 逻辑处理
				if ( (*(client_st[ci].pdata + (client_st[ci].data_len - 5)) == '\r')
					&&(*(client_st[ci].pdata + (client_st[ci].data_len - 4)) == '\n')
					&&(*(client_st[ci].pdata + (client_st[ci].data_len - 3)) == '.')
					&&(*(client_st[ci].pdata + (client_st[ci].data_len - 2)) == '\r')
					&&(*(client_st[ci].pdata + (client_st[ci].data_len - 1)) == '\n') ) {
						*(client_st[ci].pdata + (client_st[ci].data_len - 5)) = '\0';
						log_debug("read sockfd[%d] body read finished length[%d] and command", sockfd, n);

						command(sockfd, client_st[ci].pdata, client_st[ci].data_len);

						log_debug("clean client index[%d]", ci);
						if (client_st[ci].pdata) {
							free(client_st[ci].pdata);
							client_st[ci].pdata = NULL;
						}
						client_st[ci].data_size = 0;
						client_st[ci].data_len = 0;
				}
*/

			}

			if (epoll_evts[epoll_i].events & EPOLLOUT) {
				snprintf(buf, sizeof(buf), "250 OK", 6);

				int nwrite, data_size = strlen (buf); 
				n = data_size;
				while (n > 0) {
					nwrite = write (sockfd, buf + data_size - n, n);
					if (nwrite < n) {
						if (nwrite == -1 && errno != EAGAIN) {
							log_error("write to fd[%d] failed:[%d]%s", sockfd, errno, strerror(errno));
						}
						break;
					}

					n -= nwrite;
				}

				log_debug("send to client fd[%d]:[%d]%s", sockfd, data_size, buf);

				ev.data.fd = sockfd;
				ev.events = EPOLLIN;
				if (epoll_ctl(epoll_fd, EPOLL_CTL_MOD, sockfd, &ev) == -1) {
					log_error("epoll_ctl fd[%d] EPOLL_CTL_MOD EPOLLIN failed:[%d]%s", sockfd, errno, strerror(errno));
				}	
			}

			if (epoll_evts[epoll_i].events & EPOLLHUP) {
				log_debug("get event EPOLLHUP from fd[%d]", sockfd);

				ev.data.fd = sockfd;
				if (epoll_ctl(epoll_fd, EPOLL_CTL_DEL, sockfd, 0) == -1) {
					log_error("epoll_ctl fd[%d] EPOLL_CTL_DEL failed:[%d]%s", sockfd, errno, strerror(errno));
				}

				close(sockfd);
				epoll_num_running--;
				log_debug("sockfd[%d] close", sockfd);	
			}

		}

	}

	close(epoll_fd);
	close(listenfd);

	log_info("i'm finish");
    
	return 0;
}

